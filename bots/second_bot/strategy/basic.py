from strategy.early.default import EarlyStrategy
from strategy.game.default import GameStrategy

# ===============================================================================================================
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# ===============================================================================================================
class DefaultStrategy:
    ''' Базовый общий класс для стратегий. Объединяет в себя обе стратегии. '''
    early: EarlyStrategy = None
    game: GameStrategy = None
    # = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
    def __init__(self, env_cfg, early:EarlyStrategy=None, game:GameStrategy=None) -> None:
        self.early = early or EarlyStrategy()
        self.game  = game  or GameStrategy(env_cfg)
    # = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
    # ----- Обновить состояние стратегии ------------------------------------------------------------------------
    # ------- Можно изменять стратегии в процессе игры ----------------------------------------------------------
    # = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
    def update(self, game_state, player, step, early=False):
        ''' Обновить состояние стратегии '''
        strategy = self.early if early else self.game
        strategy.update(game_state, player, step)
# ===============================================================================================================
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# ===============================================================================================================